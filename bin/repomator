#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""The module aims to handle gentoo arch-specific processes automatically.
TODO:  rewrite it using appropriate bugzilla rest-api class"""

import argparse
import git
import os
import re
import sys
from repomator.bugzilla import list_handler
from repomator.bugzilla import bugtracker
from repomator.handlers import check_existence
from repomator.handlers import keywords_checker
from repomator.handlers import uniq
from subprocess import run
from termcolor import colored


check_existence("/usr/bin/git")
check_existence("/usr/bin/repoman")
check_existence("/usr/bin/ekeyword")

"""The list  of currently supported Gentoo GNU/Linux architectures"""

arches_list = ['alpha', 'amd64', 'arm', 'arm64', 'hppa', 'ia64', 'm68k', 'ppc', 'ppc64', 'riscv', 's390', 'sh', 'sparc', 'x86',
               '~alpha', '~amd64', '~arm', '~arm64', '~hppa', '~ia64', '~m68k', '~mips', '~ppc', '~ppc64', '~riscv'
               '~s390', '~sh', '~sparc', '~x86']

parser = argparse.ArgumentParser(description='Repomator script v2.0')
parser.add_argument('-a', '--arch', help='specify architecture', choices=arches_list, required=True)
parser.add_argument('-b', '--bug', type=int, help='specify bug number', required=True)
parser.add_argument('-r', '--repo', help='specify repo path')

args = parser.parse_args()

if args.repo is None:
    args.repo = os.getcwd()

repo = git.Repo(args.repo)

packages = []

with open(list_handler(args.bug), "r") as f:

    for line in f:

        if line.startswith("#") or line.isspace():
            continue

        line = line.strip("=")
        line = line.strip("\n")

        package_category = line.rpartition("/")[0]
        package_name = re.search(r'(?<=/).*(?=-\d)', line).group(0)
        package_version = re.search(r'(?<=-)\d.*?[^\s]*', line).group(0)

        if args.arch not in line and not line.endswith(package_version) or \
                keywords_checker(args.arch, args.repo, package_category, package_name, package_version):

            continue

        packages.append({
            "category": package_category,
            "name": package_name,
            "version": package_version
        })

    if not packages:
        print(colored("Can't get atoms, check options passed or bug!", "red"))
        sys.exit(1)

for package in packages:

    try:
        os.chdir(os.path.join(args.repo, package["category"], package["name"]))

    except FileNotFoundError:
        print(colored("Specify repo path with '--repo' option or change dir!", "red"))
        sys.exit(1)

    try:
        run("/usr/bin/ekeyword --format=inline {} {}-{}.ebuild"
            .format(args.arch, package["name"], package["version"]), shell=True)

    except FileNotFoundError:
        print(colored("No {} with version {} found, check packages list!"
                      .format(package["name"], package["version"]), "yellow"))
        sys.exit(1)

packages = uniq(packages)

for package in packages:

    os.chdir(os.path.join(args.repo, package["category"], package["name"]))
    if args.arch[:1] is not "~":
        res = run("/usr/bin/repoman --quiet --include-arches=\"{}\" ci -m \"{}/{}: {} stable wrt bug #{}\""
                  .format(args.arch, package["category"], package["name"], args.arch, args.bug),
                  shell=True)
    else:
        res = run("/usr/bin/repoman --include-arches=\"{}\" ci -m \"{}/{}: Add {} keyword wrt bug #{}\""
                  .format(args.arch, package["category"], package["name"], args.arch, args.bug),
                  shell=True)

    if res.returncode != 0:

        print(colored("Undo all local commits ...", "yellow"))
        repo.git.reset('--hard', 'origin/master')

        print(colored("Could not continue, resolve errors above and try again!", "red"))
        sys.exit(1)

bugtracker(args.arch, args.bug)
